"use strict";
var require$$1 = require("electron");
var require$$1$1 = require("path");
var require$$2 = require("url");
function _interopNamespace(e) {
  if (e && e.__esModule)
    return e;
  var n = { __proto__: null, [Symbol.toStringTag]: "Module" };
  if (e) {
    Object.keys(e).forEach(function(k) {
      if (k !== "default") {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function() {
            return e[k];
          }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}
const isSingleInstance = require$$1.app.requestSingleInstanceLock();
if (!isSingleInstance) {
  require$$1.app.quit();
  process.exit(0);
}
require$$1.app.disableHardwareAcceleration();
{
  require$$1.app.whenReady().then(() => Promise.resolve().then(function() {
    return /* @__PURE__ */ _interopNamespace(require("electron-devtools-installer"));
  })).then(({ default: installExtension, VUEJS3_DEVTOOLS }) => installExtension(VUEJS3_DEVTOOLS, {
    loadExtensionOptions: {
      allowFileAccess: true
    }
  })).catch((e) => console.error("Failed install extension:", e));
}
let mainWindow = null;
const createWindow = async () => {
  mainWindow = new require$$1.BrowserWindow({
    show: false,
    vibrancy: "under-window",
    visualEffectState: "active",
    webPreferences: {
      nativeWindowOpen: true,
      webviewTag: false,
      preload: require$$1$1.join(__dirname, "../../preload/dist/index.cjs")
    }
  });
  mainWindow.on("ready-to-show", () => {
    mainWindow == null ? void 0 : mainWindow.show();
    {
      mainWindow == null ? void 0 : mainWindow.webContents.openDevTools();
    }
  });
  const pageUrl = "http://localhost:3000/";
  await mainWindow.loadURL(pageUrl);
};
require$$1.app.on("web-contents-created", (_event, contents) => {
  contents.on("will-navigate", (event, url) => {
    const allowedOrigins = new Set();
    const { origin, hostname } = new require$$2.URL(url);
    const isDevLocalhost = hostname === "localhost";
    if (!allowedOrigins.has(origin) && !isDevLocalhost) {
      console.warn("Blocked navigating to an unallowed origin:", origin);
      event.preventDefault();
    }
  });
  contents.setWindowOpenHandler(({ url }) => {
    const allowedOrigins = new Set([
      "https://vitejs.dev",
      "https://github.com",
      "https://v3.vuejs.org"
    ]);
    const { origin } = new require$$2.URL(url);
    if (allowedOrigins.has(origin)) {
      require$$1.shell.openExternal(url);
    } else {
      console.warn("Blocked the opening of an unallowed origin:", origin);
    }
    return { action: "deny" };
  });
  contents.session.setPermissionRequestHandler((webContents, permission, callback) => {
    var _a;
    const origin = new require$$2.URL(webContents.getURL()).origin;
    const allowedOriginsAndPermissions = new Map([]);
    if ((_a = allowedOriginsAndPermissions.get(origin)) == null ? void 0 : _a.has(permission)) {
      callback(true);
    } else {
      console.warn(`${origin} requested permission for '${permission}', but was blocked.`);
      callback(false);
    }
  });
  contents.on("will-attach-webview", (event, webPreferences, params) => {
    delete webPreferences.preload;
    delete webPreferences.preloadURL;
    webPreferences.nodeIntegration = false;
    const { origin } = new require$$2.URL(params.src);
    const allowedOrigins = new Set();
    if (!allowedOrigins.has(origin)) {
      console.warn(`A webview tried to attach ${params.src}, but was blocked.`);
      event.preventDefault();
    }
  });
});
require$$1.app.on("second-instance", () => {
  if (mainWindow) {
    if (mainWindow.isMinimized())
      mainWindow.restore();
    mainWindow.focus();
  }
});
require$$1.app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    require$$1.app.quit();
  }
});
require$$1.app.whenReady().then(createWindow).catch((e) => console.error("Failed create window:", e));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
